import * as fs from 'fs';
import { rollup } from 'rollup';
import svelte from 'rollup-plugin-svelte';
import resolve from 'rollup-plugin-node-resolve';
import commonjs from 'rollup-plugin-commonjs';
import buble from 'rollup-plugin-buble';
import uglify from 'rollup-plugin-uglify';
import CleanCSS from 'clean-css';

//Path constants
const componentsList = `constants/component_list.txt`;

const components = fs.readFileSync(componentsList).toString().split("\n");

components.forEach( comp => {
	rollup({
		entry: `src/${comp}.js`,

		plugins: [
			svelte({
				// we'll extract any component CSS out into
				// a separate file — better for performance
				css ( css ) {
					if ( css === null ) css = '';
					if ( production ) css = new CleanCSS().minify( css ).styles;
					fs.writeFileSync(
						'public/app.css',
						`/* This file is automatically generated — don't edit it! */\n${css}`
					);
				}
			}),

			// If you have external dependencies installed from
			// npm, you'll most likely need these plugins. In
			// some cases you'll need additional configuration —
			// consult the documentation for details:
			// https://github.com/rollup/rollup-plugin-commonjs
			resolve({ jsnext: true, main: true }),
			commonjs({ include: 'node_modules/**' })
		]
	}).then( bundle => {

		// Alternatively, let Rollup do it for you
		// (this returns a promise). This is much
		// easier if you're generating a sourcemap
		// output format - 'amd', 'cjs', 'es', 'iife', 'umd'
		bundle.write({
			dest: `modules/${comp}.js`,
			format: 'cjs',
			dest: 'bundle.js',
			sourceMap: true
		});
	});

});
